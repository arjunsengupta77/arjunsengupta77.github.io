Attributes and Conditions

1. Name

Type: String

Represents the unique identifier for the system.

Must be unique across all systems to avoid ambiguity.

Should clearly describe the systemâ€™s role or purpose.



2. Type

Type: Enum

Categorizes the system's role in the data pipeline. Possible values:

Data_Source: Originates raw data (e.g., databases, APIs).

Reference_Data: Provides static or auxiliary data (e.g., configuration systems).

Processing: Transforms or enriches data (e.g., ETL processes, calculators).

Reporting: Consumes data for reporting or analytics (e.g., BI tools).


A system can only have one type.

Specific conditions apply based on the type:

Data_Source and Reference_Data systems must not have incoming feeds.

Reporting systems must not have outgoing feeds.




3. Feeds In

Type: Array of Strings

Represents the list of data feeds serving as input to the system.

Must contain valid feed names defined in the overall data flow.

Conditions:

Empty for Data_Source and Reference_Data systems.

Must have at least one feed for Processing and Reporting systems.




4. Feeds Out

Type: Array of Strings

Represents the list of data feeds generated by the system.

Must contain valid feed names defined in the overall data flow.

Conditions:

Empty for Reporting systems.

Must have at least one feed for Data_Source, Reference_Data, and Processing systems.




5. Owner

Type: String

Specifies the team or individual responsible for maintaining and operating the system.

Must be a valid name or identifier that helps in tracking accountability.



6. Description

Type: String

A brief summary explaining the purpose or functionality of the system.

Should provide clear context on the system's role in the data flow.





---

Conditions for Attributes

Data_Source and Reference_Data systems must not have incoming feeds.

Reporting systems must not have outgoing feeds.

Feeds listed in feeds_in and feeds_out must be defined in the data flow.

System names must be unique to ensure proper identification.

Circular dependencies between systems should be avoided.
